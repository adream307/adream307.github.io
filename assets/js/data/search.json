[ { "title": "linux 系统 df 命令卡主了", "url": "/posts/stuck-on-df/", "categories": "linux, df", "tags": "df", "date": "2021-01-29 14:50:00 +0800", "snippet": "使用 df 命令显示磁盘使用情况，但是卡主了解决方案： 使用 strace 追踪卡在哪里$ sudo strace dfstat(&quot;/snap/gnome-calculator/748&quot;, {st_mode=S_IFDIR|0755, st_size=111, ...}) = 0stat(&quot;/snap/gnome-logs/100&quot;, {st_mode=S_IFDIR|0755, st_size=111, ...}) = 0stat(&quot;/cifs/data&quot;,发现卡在 /cifs/data 目录上, 这是使用 cifs 挂着的共..." }, { "title": "在launch kernel的过程中不能调用cudaFree", "url": "/posts/kernel-launch-block-cudafree/", "categories": "linux, cuda", "tags": "cuda", "date": "2021-01-25 15:19:00 +0800", "snippet": "测试发现 cuda 的 launch kernel 的过程中不能释放该 gpu 上的显存，cuda 任务被释放的显存可能被 kernel 调用，所以禁止在 laucn kernel 过程中释放该 gpu 上的显存。测试代码如下：#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;thread&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;cuda_runtime.h&amp;gt;#include &amp;l..." }, { "title": "在 vps 上 fork github 的 repo", "url": "/posts/vps-git-repo/", "categories": "linux, git", "tags": "vps, git", "date": "2020-12-05 19:38:00 +0800", "snippet": "在 ~/.ssh/config 添加 vps 的 ssh 配置Host vps Hostname &amp;lt;vps-ip-address&amp;gt; User &amp;lt;vps-user-name&amp;gt; Port &amp;lt;vps-port&amp;gt; IdentityFile &amp;lt;vps-rsa-file&amp;gt;在 vps 上 fork github 的 repo$ git clone --bare https://github.com/apache/arrow.gitCloning into bare ..." }, { "title": "内网 IP", "url": "/posts/inner-ip/", "categories": "linux, ip", "tags": "ip", "date": "2020-12-02 19:29:00 +0800", "snippet": "参考链接 : https://hsk.oray.com/news/5928.html 10开头的IP都是内网IP。即10.0.0.0 到 10.255.255.255是内网IP。不少自家拉的带宽路由分配的都是10开头的IP，这类都是内网IP。 以下IP段的地址都是内网IP地址。 （1）10.0.0.0 到 10.255.255.255 （2）172.16.0.0 到172.31.255.255 （3）192.168.0.0 到192.168.255.255 " }, { "title": "使用 docker-compose 启动 tikv 测试示例", "url": "/posts/tikv-with-docker/", "categories": "linux, tikv", "tags": "tikv", "date": "2020-11-30 20:22:00 +0800", "snippet": "docker-compose.ymlversion: &#39;3.5&#39;services: pd0: image: pingcap/pd:latest network_mode: &quot;host&quot; ports: - &quot;2379:2379&quot; - &quot;2380:2380&quot; volumes: - /etc/localtime:/etc/localtime:ro command: - --name=pd0 - --client-urls=http://0.0.0.0:2379..." }, { "title": "go 语言动态添加 select case", "url": "/posts/select-case/", "categories": "linux, go", "tags": "go", "date": "2020-11-30 13:25:00 +0800", "snippet": "go 语言中传统的 select case 必须固定写死，即我们在编码阶段必须明确知道当前有几个 case,如下select{ case &amp;lt;- chan1: //todo case &amp;lt;- chan2: //todo case &amp;lt;- chan3: //todo case &amp;lt;- chan4: //todo}如果我在编码是不确定有几个 case，只在运行是才能知道，应该如何处理? 示例代码如下package mainimport ( &quot;context..." }, { "title": "将 distinct agg 改写成 非 distinct agg", "url": "/posts/rewrite-distinct-aggregates/", "categories": "spark, agg", "tags": "agg, distinct", "date": "2020-11-24 16:10:00 +0800", "snippet": "如果Aggregate操作中同时包含Distinct与非Distinct操作，优化器可以将该操作改写成两个不包含Distinct的Aggregate假设schema如下create table animal(gkey varchar(128), cat varchar(128), dog varchar(128), price double);animal表中的数据如下 gkey cat dog price ..." }, { "title": "curl 使用代理访问 google", "url": "/posts/curl-socks5-proxy/", "categories": "linux, curl", "tags": "curl, socks5", "date": "2020-11-22 15:24:00 +0800", "snippet": "socks5 代理curl -x &quot;socks5h://127.0.0.1:1080&quot; https://www.google.com如果使用 socks5:// 前缀，而不是 socks5h://，那么可以能会得到以下错误。因为 socks5:// 前缀是在本地解析www.google.com，因此可以无法得到正确的 IP 地址, 而 socks5h:// 是在远端解析域名$ curl -x &quot;socks5://127.0.0.1:1081&quot; https://www.google.comcurl: (51) SSL: no alternativ..." }, { "title": "int64的读写操作是否具有原子性质", "url": "/posts/load-store-in-x86-64/", "categories": "linux, atomic", "tags": "go", "date": "2020-11-21 11:15:00 +0800", "snippet": "在 x86-64 机器上，int64 的读写操作是否具有原子性?假设变量 val 是 int64， 现在有两个线程，线程 writer 只负责向 val 写入数据，线程 reader 只负从 val 读取数据假设 val 当前值为 0x0102030405060708writer 线程正在执行写操作，将数据 0x0000111100002222 写入 valreader 线程正在执行读操作，从 val 读取数据那么 reader 线程得到的 val 只能是 0x0102030405060708 或 0x0000111100002222 还是某个不确定的中间状态?如果 int64 的读..." }, { "title": "[CUDA]关于Drive API中Kernel函数参数的一个坑", "url": "/posts/cuda-driver-api-kernel/", "categories": "gpu, cuda", "tags": "cuda", "date": "2020-11-20 16:16:00 +0800", "snippet": "在 CUDA 的 Drive API 中 launch kernel 函数原型如下:CUresult CUDAAPI cuLaunchKernel(CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blo..." }, { "title": "docker 中创建新用户", "url": "/posts/docker-user/", "categories": "linux, docker", "tags": "docker", "date": "2020-11-15 21:05:00 +0800", "snippet": "DockerfileFROM ubuntu:18.04RUN sed -i &#39;s/archive.ubuntu.com/mirrors.aliyun.com/g&#39; /etc/apt/sources.listRUN sed -i &#39;s/security.ubuntu.com/mirrors.aliyun.com/g&#39; /etc/apt/sources.listRUN useradd -m test123 -s /bin/bashRUN echo &#39;test123\\ntest123&#39; | passwd test123上述 Dockerfile ..." }, { "title": "AWS NAT 实例", "url": "/posts/aws-nat-instance/", "categories": "aws, nat", "tags": "aws, nat", "date": "2020-11-12 21:31:00 +0800", "snippet": "创建 VPCvpc 地址范围为 192.168.0.0/16新建 vpc 详细信息如下创建两个子网M0-0 : 192.168.0.0/24M0-1 : 192.168.1.0/24子网详细信息创建互联网网关选择 Actions -&amp;gt; Attach to VPC 将网关附加到 VPC M0网关附加到 VPC M0新建立路由表新建立的路由表默认只有一条规则，用于 VPC 内部添加一条路由规则，将流向 VPC 外的流量发送到互联网网关 Destination : 0.0.0.0/0 Target : 之前创建的互联网网关添加规则后的路由表将路由表关联 M0-0 子网，使得..." }, { "title": "rebase 合并多个commit", "url": "/posts/git-rebase-merge-commit/", "categories": "linux, git", "tags": "git", "date": "2020-11-12 14:54:00 +0800", "snippet": "设置编辑器为 vimgit config --global core.editor &quot;vim&quot;当前 commit 日志信息如下: master 目前包含两条 commit : a79fcc1 和 a79fcc1 在 master 分支上切出一个分支 tb tb 包含 3 个 commit : 124b6c7，dd81b51，b44f3c1* 124b6c7 (HEAD -&amp;gt; tb) 5* dd81b51 4* b44f3c1 3* a79fcc1 (master) 2* 9d38256 1现在需要把 tb 的 3 个 commmit 合并成一个 c..." }, { "title": "命令行显示 git tree", "url": "/posts/git-tree/", "categories": "linux, git", "tags": "git", "date": "2020-11-12 09:28:00 +0800", "snippet": "git log --graph --decorate --pretty=oneline --abbrev-commi设置别名 treegit config --global alias.tree &quot;log --graph --decorate --pretty=oneline --abbrev-commit&quot;git tree参考资料 https://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal" }, { "title": "使用指定的 SSH key 操作 git", "url": "/posts/git-with-key-file/", "categories": "linux, git", "tags": "git, ssh", "date": "2020-11-11 21:01:00 +0800", "snippet": "Starting from Git 2.3.0 we also have the simple command (no config file needed):GIT_SSH_COMMAND=&#39;ssh -i private_key_file -o IdentitiesOnly=yes&#39; git clone user@host:repo.gitWith git 2.10+ (Q3 2016: released Sept. 2d, 2016), you have the possibility to set a config for GIT_SSH_COMMANDA new ..." }, { "title": "iptables-essentials", "url": "/posts/iptables-essentials/", "categories": "linux, iptables", "tags": "iptables", "date": "2020-11-09 21:42:00 +0800", "snippet": "https://github.com/trimstray/iptables-essentialsTable of Contents Table of Contents Tools to help you configure Iptables Manuals/Howtos/Tutorials Useful Kernel Settings (sysctl) Configuration - rp_filter - log_martians - send_redirects - accept_source_route - accept_redirects ..." }, { "title": "tar 分卷压缩与解压", "url": "/posts/tar-split/", "categories": "linux, bash", "tags": "tar", "date": "2020-11-09 16:38:00 +0800", "snippet": "https://wangying.sinaapp.com/archives/2574分卷压缩将 pulsar.dat 按照 100M 一个文件卷压缩分卷压缩gztar zcf - pulsar.dat | split -d -b 100m - pulsar.dat.tar.gz.生成文件： pulsar.dat.tar.gz.00 、pulsar.dat.tar.gz.01分卷压缩bz2tar jcf - pulsar.dat |split -d -b 100m - pulsar.dat.tar.bz2.生成文件： pulsar.dat.tar.bz2.00 、pulsar.dat.ta..." }, { "title": "go 项目的 github action", "url": "/posts/go-workflow/", "categories": "github, go", "tags": "action", "date": "2020-11-09 16:07:00 +0800", "snippet": "https://github.com/actions/starter-workflows/blob/main/ci/go.ymlname: Goon: push: branches: [ $default-branch ] pull_request: branches: [ $default-branch ]jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Set up Go 1.x uses: actions/setup-go@v2 with: ..." }, { "title": "ssh 执行远程命令和端口转发", "url": "/posts/ssh-remote-command/", "categories": "linux, ssh", "tags": "ssh", "date": "2020-11-05 14:17:00 +0800", "snippet": "执行远程命令查看远程主机是否运行进程httpdssh user@remote_host &#39;ps ax | grep httpd&#39;绑定本地端口假定我们要让 1081 端口的数据，都通过 SSH 传向远程主机，命令就这样写ssh -D 1081 user@remote_hostSSH 会建立一个 socket，去监听本地的 1081 端口，所有链接本地 1081 端口的数据都会被转发到 remote_host如果 remote_host 具备翻墙的功能，那么这个命令相当于在本地的 1081 端口上建立一个 sock 的代理服务器使用 netstat 命令观察在 localho..." }, { "title": "ssh 跳转进入局域网内部电脑", "url": "/posts/ssh-jump/", "categories": "linux, ssh", "tags": "ssh", "date": "2020-11-05 13:55:00 +0800", "snippet": "假设局域网内部有两台机器，A和B，其中机器A具有公网ip，机器B只有内网ip，网络信息如下。机器A公网IP: 11.23.45.67公网SSH端口: 17890内网IP: 192.168.1.30SSH 用户名: mma机器B内网IP: 192.168.1.10SSH 用户名: mmbSSH 端口: 22现在机器C上，配置SSH跳转，从C登录A，再从A跳转进入B在机器C上配置SSH免密登录机器Assh-copy-id -p 17890 mma@11.23.45.67在机器C.ssh/config添加以下内容实现ssh跳转Host hosta Hostname 11.23.45.67..." }, { "title": "c++11 shared_ptr 类型转换", "url": "/posts/c++11-shared-ptr/", "categories": "c++11", "tags": "c++11", "date": "2020-11-04 19:42:00 +0800", "snippet": "#include &amp;lt;memory&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt; class base{ public: base(){std::cout &amp;lt;&amp;lt; &quot;base&quot; &amp;lt;&amp;lt; std::endl;} ~base(){std::cout &amp;lt;&amp;lt; &quot;~base&quot; &amp;lt;&amp;lt; std::endl;} void ..." }, { "title": "拆解蚂蚁盛宴：那些戴面具的狂欢者", "url": "/posts/ant-group/", "categories": "Blogging, Talking", "tags": "Talking", "date": "2020-11-04 16:20:00 +0800", "snippet": "https://finance.sina.com.cn/tech/2020-11-02/doc-iiznezxr9409177.shtml悲喜一年前，过度沉溺于酒精的张振新，在毫无征兆的情况下，病死在英国伦敦的医院里。他是债务规模高达700亿的“先锋系”的实际掌控者。他的猝逝，让人措手不及，也让旗下已经爆雷的互联网金融平台雪上加霜。这是一个标志型事件。互联网金融领域的“大跃进”结束了，留下遍地的狼藉。“先锋系”曾是这个风口上的代表，如今轰然倒塌，背后的万千投资人犹如热锅上的蚂蚁。许敏、安英、刘贻菊、韩家艳、李福维——我在“先锋系”受害者群体中发现了这几个名字。他们只是中国最普通的家庭妇女..." }, { "title": "bash 脚本设置 GOPATH", "url": "/posts/set-go-path/", "categories": "linux, bash", "tags": "bash", "date": "2020-11-03 19:25:00 +0800", "snippet": "go-path.sh#!/bin/bashif [ $# -ne 1 ];then echo &quot;usage : go-path: &amp;lt;go-path&amp;gt;&quot; exit 0fiif [ ! -z $GOPATH ];then echo &quot;origin GOPATH = ${GOPATH}&quot; echo &quot;origin PATH = ${PATH}&quot; go_bin_path=:${GOPATH}/bin if [[ $PATH =..." }, { "title": "pulsar go sdk 测试", "url": "/posts/pulsar-go-sdk/", "categories": "pulsar, go-sdk", "tags": "pulsar", "date": "2020-11-03 14:45:00 +0800", "snippet": "docker 启动 pulsardocker run --rm -p 6650:6650 -p 8080:8080 apachepulsar/pulsar:2.6.0 bin/pulsar standalonepulsar go sdkpackage mainimport ( &quot;context&quot; &quot;encoding/binary&quot; &quot;github.com/apache/pulsar-client-go/pulsar&quot; &quot;log&quot; &quot;sync&quot;)func main() { cli, err ..." }, { "title": "etcd 分布式锁实现原理", "url": "/posts/etcd-mutex/", "categories": "etcd", "tags": "etcd", "date": "2020-11-02 14:55:00 +0800", "snippet": "docker 启动 etcddocker run --rm -p 2379:2379 -p 2380:2380 --name etcd \\quay.io/coreos/etcd:v3.4.9 etcd \\--name node1 \\--initial-advertise-peer-urls http://127.0.0.1:2380 \\--listen-peer-urls http://0.0.0.0:2380 \\--advertise-client-urls http://127.0.0.1:2379 \\--listen-client-urls http://0.0.0.0:2379 ..." }, { "title": "bash 判断字符串是否包含另一个字符串", "url": "/posts/bash-string-contain/", "categories": "linux, bash", "tags": "bash", "date": "2020-11-01 15:20:00 +0800", "snippet": "how to check if a string contains a substring in bashYou can use Marcus’s answer (* wildcards) outside a case statement, too, if you use double brackets:string=&#39;My long string&#39;if [[ $string == *&quot;My long&quot;* ]]; then echo &quot;It&#39;s there!&quot;fiNote that spaces in the needle..." }, { "title": "为什么中国能拥有远超于其经济发展水平的社会治安水平？", "url": "/posts/china-social-security/", "categories": "Blogging, Talking", "tags": "Talking", "date": "2020-10-31 11:57:00 +0800", "snippet": "作者：neo anderson链接：为什么中国能拥有远超于其经济发展水平的社会治安水平？ - neo anderson 的回答 - 知乎说到底，中外社会结构不同。(上)回答这个问题之前，先给大家推荐两本书，让大家对美国的命案有一个直观的认识。书中的法医比尔巴斯是世界上第一家人体农场的创办者和管理者。人体农产是模仿凶杀现场，研究人类尸体在自然环境中分解过程的法医学实验室。书中提到的美国的命案，有叔叔奸杀侄女，室友杀害另一位室友，男友杀害女友，老婆杀害老公，老公杀害老婆，野兽男连环杀害站街女，性虐男连环拘禁杀害被虐女性奴。相比这些案件，著名的辛普森杀妻案是小巫见大巫，如果不是辛普森是名人的话..." }, { "title": "etcd revision 测试", "url": "/posts/etcd-revision/", "categories": "etcd", "tags": "etcd", "date": "2020-10-29 16:20:00 +0800", "snippet": "docker-compose启动 etcd 集群docker-compose -f etcd-only.yml up -detcd-only.yml,设置 snapshot 为100，即每 100 个修改，产生一次 snapshot，清除 WALversion: &#39;3.5&#39;services: machine-1: image: quay.io/coreos/etcd:v3.4.9 hostname: machine-1 container_name: machine-1 command: etcd --data..." }, { "title": "etcd 集群服务测试", "url": "/posts/etcd-cluster/", "categories": "etcd", "tags": "etcd", "date": "2020-10-29 15:48:00 +0800", "snippet": "docker-composeversion: &#39;3.5&#39;services: machine-1: image: quay.io/coreos/etcd:v3.4.9 hostname: machine-1 container_name: machine-1 command: etcd --data-dir=data.etcd --name machine-1 --initial-advertise-peer-urls http://machine-1:2380 --listen-peer-urls http:/..." }, { "title": "使用 Txn 一次性插入多个语句", "url": "/posts/ectd-txn-multi-insert/", "categories": "etcd", "tags": "etcd", "date": "2020-10-29 10:00:00 +0800", "snippet": "etcd 使用 Txn 提供简单的事务处理，使用这个特性，可以一次性插入多条语句，测试代码如下:package mainimport ( &quot;context&quot; &quot;fmt&quot; &quot;go.etcd.io/etcd/clientv3&quot; &quot;log&quot;)func main() { endpoints := []string{&quot;127.0.0.1:10001&quot;, &quot;127.0.0.1:10002&quot;, &quot;127.0.0.1:10003&quot;} cli, err := clie..." }, { "title": "C++11 使用自定义 hash 函数及比较函数的 unordered_set", "url": "/posts/c++11-unordered_set/", "categories": "c++11", "tags": "c++11, unordered_set", "date": "2020-10-21 13:23:00 +0800", "snippet": "#include &amp;lt;unordered_set&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;iostream&amp;gt;struct MyKey{ int key;};struct MyKeyHashHasher{ size_t operator()(const MyKey &amp;amp;k) const noexcept { return std::hash&amp;lt;int&amp;gt;{}(k.key); }};struct MyKeyHashComparator{ bool o..." }, { "title": "Mongodb go sdk 测试", "url": "/posts/mongodb-go-sdk/", "categories": "mongodb, go-sdk", "tags": "mongodb, go", "date": "2020-10-21 11:50:00 +0800", "snippet": "启动 mongodbdocker run -it --rm -p 27017:27017 --name mongodb -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=123456 mongo:4.4mongo_exp1.gopackage mainimport ( &quot;context&quot; &quot;fmt&quot; &quot;go.mongodb.org/mongo-driver/bson&quot; &quot;go.mongodb.org/mongo-driver/mongo&..." }, { "title": "使用 Docker 启动 mongodb", "url": "/posts/mongodb-docker/", "categories": "mongo, docker", "tags": "docker, mongodb", "date": "2020-10-20 18:30:00 +0800", "snippet": "使用 docker 启动 mongodb$ mkdir db$ docker run -it --rm -p 27017:27017 -v ${PWD}/db:/data/db --name mongodb -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=123456 mongo:4.4安装 mongodb-shell $ wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - $ echo &qu..." }, { "title": "AWS 命令配置文件", "url": "/posts/aws-profile/", "categories": "aws, sdk", "tags": "aws, go", "date": "2020-10-19 10:00:00 +0800", "snippet": "aws cli 可以配置多个 Access Key，在访问时手动选择使用哪个Key~/.aws/credentials内容如下:[default]aws_access_key_id=AKIAIOSFODNN7EXAMPLEaws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY[cnnw1]aws_access_key_id=AKIAI44QH8DHBEXAMPLEaws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY~/.aws/config 内容如..." }, { "title": "AWS go sdk 使用简介", "url": "/posts/aws-go-sdk/", "categories": "aws, sdk", "tags": "aws, go", "date": "2020-10-19 09:30:00 +0800", "snippet": "介绍如何使用 aws 的 go sdk 创建 ec2 实例，并且可以 ssh 远程登录该 ec2 实例，以及如何销毁 ec2 实例aws cliaws cli 是 amazon 提供的命令行工具，可以直接在命令行中操作 ec2 实例。可以直接使用 docker 运行 aws cli$ docker run --rm -it amazon/aws-cli --versionaws-cli/2.0.56 Python/3.7.3 Linux/5.4.0-48-generic docker/x86_64.amzn.2创建目录 ~/.aws和 ~/work/asw， 前者用于存储 aws cli..." }, { "title": "docker运行指定 GPU", "url": "/posts/docker-run-special-gpu/", "categories": "linux, docker", "tags": "docker, gpu", "date": "2020-10-18 14:31:00 +0800", "snippet": "docker 内运行所有的 GPU docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi输出结果+-----------------------------------------------------------------------------+| NVIDIA-SMI 450.57 Driver Version: 450.57 CUDA Version: 11.0 ||-------------------------------+----------------------+--..." }, { "title": "zap配合logrotate实现日志滚动", "url": "/posts/zap-with-logrotate/", "categories": "linux, logrotate", "tags": "zap, logrotate, go", "date": "2020-09-10 17:00:00 +0800", "snippet": "zap是Uber 提供的GoLang高性能日志库，zap 本身并不提供日志滚动功能，官方 FAQ 提到，可以使用Linux系统自带的 logrotate 或lumberjack实现日志滚动功能lumberjack 只能向文件输出日志，如果我们希望同时向stderr 和文件输出日志，只能使用 logrotate 配合自定义 WriteSyncer 实现了Go代码package mainimport ( &quot;bufio&quot; &quot;context&quot; &quot;fmt&quot; &quot;go.uber.org/zap&quot; &quot;go.uber..." }, { "title": "9-自定义数据类型上的 Codegen", "url": "/posts/udt_codegen/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-09 08:00:00 +0800", "snippet": "本篇文章是这个系列的最后一篇文章，我们介绍如何在 UDT 上做 Codegen，和前文类似， Codegen 实现的自定义函数要求如下: 该函数接受两个 my_point 类型的参数作为输入 参数名记为 x，y 函数输出 my_point(x.x+y.x, x.y+y.y)Codegen和前文类似， Codegen 实现的自定义函数也是从 Expression 继承，并实现 doGenCode 方法。doGenCode 也按照 nullable 的值分为两部分，完整核心代码如下：case class my_foo(inputExpr: Seq[Expression]) extend..." }, { "title": "8-自定义数据类型上的自定义函数", "url": "/posts/udt_udf_example/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-08 08:00:00 +0800", "snippet": "在上篇文章中，我们介绍了自定义数据类型，在本篇文章中，我们介绍如何在自定义数据类型上定义自定义函数，参考前文介绍的 my_foo 方法，这里我们介绍两种非 codegen 实现的自定义函数自定义函数自定义函数的需求如下: 该函数接受两个 my_point 类型的参数作为输入 参数名记为 x，y 函数输出 my_point(x.x+y.x, x.y+y.y)方法1使用 SparkSQL 内置的 UDF 实现，核心代码如下：val my_foo1 = (x: my_point, y: my_point) =&amp;gt; { if ((x == null) || (y == nu..." }, { "title": "7-自定义数据类型", "url": "/posts/udt_example/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-07 08:00:00 +0800", "snippet": "在之前的文章中，我们介绍了如何使用 Codegen 实现自定义函数，但是自定义函数参数类型及返回值类型均为 Spark 原生的数据类型。从本篇文章开始，我们介绍如何在 Spark 中自定义数据类型 (UDT) ，以及针对该 UDT 的自定义函数，最后，我们希望这些自定义函数也是 Codegen 实现的UDT自定义数据类型的要求如下： UDT 的名字为 my_point my_point 包含两个 double 类型的成员变量 x 和 yUDT 的核心代码如下，完整代码见 https://github.com/adream307/SparkSQLWithCodegen/tree/mas..." }, { "title": "6-如何处理 Null", "url": "/posts/codegen_with_null/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-06 08:00:00 +0800", "snippet": "在上篇文章我，我们介绍了 Codegen 实现的自定义函数，当时为了简化叙述，假设所有输入数据均为非空值。在本篇文章中，我们将介绍如何在 Codegen 中处理空值的问题。Codegen 的自定义函数自定义函数的需求与前文一样： 需要一个名字为 my_foo 的函数 该函数接受两个 double 类型的参数作为输入 参数名记为 x，y 函数输出 x*y+3与不处理 Null 的自定义函数有两处区别： nullable 和 doGenCode， 程序核心代码如下：package org.apache.spark.sql.myfunctions { import org.apach..." }, { "title": "5-Codegen 示例", "url": "/posts/codegen_example/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-05 08:00:00 +0800", "snippet": "在之前的文章中，我们介绍了 Spark 中两种自定义函数的实现，本篇文章中我们将正式介绍用 Codegen 方式实现的自定义函数。为了简化叙述，本篇文章并不介绍如何在 Codegen 中处理 Null 值，假设用户的所有输入数据均为非空。Codegen 的自定义函数自定义函数的需求与前文一样： 需要一个名字为 my_foo 的函数 该函数接受两个 double 类型的参数作为输入 参数名记为 x，y 函数输出 x*y+3与非 UDF 的自定义函数类似，Codegen 实现的自定义函数也需要从 Expression 继承，完整的核心代码如下:package org.apache.s..." }, { "title": "4-自定义函数示例2", "url": "/posts/udf_example2/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-04 08:00:00 +0800", "snippet": "在上一篇文章中，我们介绍了使用 Spark 原生的 UDF 实现的自定义函数，在这里我们介绍一种非 UDF 实现的自定义函数，为后面介绍的 Codegen 实现自定义函数打基础。非 UDF 的自定义函数自定义函数的需求与前文一样： 需要一个名字为 my_foo 的函数 该函数接受两个 double 类型的参数作为输入 参数名记为 x，y 函数输出 x*y+3非 UDF 自定义函数代码如下:package org.apache.spark.sql.myfunctions { import org.apache.spark.sql.catalyst.InternalRow imp..." }, { "title": "3-自定义函数示例1", "url": "/posts/udf_example1/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-03 08:00:00 +0800", "snippet": "Spark 原生提供UDF用于实现自定义函数UDF 示例假设我们的需求是这样的： 需要一个名字为 my_foo 的函数 该函数接受两个 double 类型的参数作为输入 参数名记为 x，y 函数输出 x*y+3为了实现上述功能，我们在程序中定义了 my_foo 匿名函数，并向 spark 注册 udf，完整代码位于 https://github.com/adream307/SparkSQLWithCodegen/tree/master/code/udf_example1 目录内val my_foo = (x: Double, y: Double) =&amp;gt; x * y ..." }, { "title": "2-显示 Codegen 代码", "url": "/posts/show_codegen_code/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-02 08:00:00 +0800", "snippet": "在上一篇文章中，我们演示了如何新建一个 Spark SQL 的工程，并展示了一个简单的 SQL 查询select x, y, power(x,y) from data_test文章 Deep Dive into Spark SQL’s Catalyst Optimizer 详细介绍了 Spark SQL 的优化机制。为了提高查询速度，Spark 会将查询的 SQL 语句动态生成一份对应的 java 代码。这个 java 代码和 SQL 语句是一一对应的，一个 SQL 语句对应这一份 java 代码。查看 Codegen 代码那如何查看这个动态生成的 java 代码呢？Spark 提供了调..." }, { "title": "1-新建一个 Spark SQL 的工程", "url": "/posts/new_spark_sql_project/", "categories": "spark, codegen", "tags": "spark-codegen", "date": "2020-06-01 08:00:00 +0800", "snippet": "本文介绍如何新建一个 Spark SQL 的例子，Spark 采用 standalone 的 local 模式, 需要安装 scala本文所演示的例子位于 https://github.com/adream307/SparkSQLWithCodegen/tree/master/code/new_spark_sql_project 目录内新建目录结构Spark SQL 工程的目录结构如下所示:new_spark_sql_project/|-- build.sbt`-- src `-- main `-- scala `-- SparkSQLTest...." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2019-08-13 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv disabled unless you have a good reason. If you website has low traffic, the page views count would discourage you to write m..." }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons.With a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp;amp; App Icon Generator and upload your original image.Clic..." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "InstallationFork Chirpy on GitHub, rename the repository to USERNAME.github.io (where USERNAME is your GitHub username), and then open terminal and clone the fork to local by:$ git clone https://github.com/USERNAME/USERNAME.github.io.git -b master --single-branchSetting up the local envrionmentIf..." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts/ of the root directory. Please note that the EXTENSION must be one of md and markdown.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD..." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at o..." } ]
